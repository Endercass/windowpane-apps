// This file is generated by rust-protobuf 4.0.0-alpha.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `manifest.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_4_0_0_ALPHA_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:windowpane_apps.Manifest)
pub struct Manifest {
    // message fields
    // @@protoc_insertion_point(field:windowpane_apps.Manifest.app_name)
    pub app_name: ::std::string::String,
    // @@protoc_insertion_point(field:windowpane_apps.Manifest.start)
    pub start: ::std::string::String,
    // @@protoc_insertion_point(field:windowpane_apps.Manifest.backend)
    pub backend: ::protobuf::EnumOrUnknown<Backend>,
    // special fields
    // @@protoc_insertion_point(special_field:windowpane_apps.Manifest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Manifest {
    fn default() -> &'a Manifest {
        <Manifest as ::protobuf::Message>::default_instance()
    }
}

impl Manifest {
    pub fn new() -> Manifest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "app_name",
            |m: &Manifest| { &m.app_name },
            |m: &mut Manifest| { &mut m.app_name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "start",
            |m: &Manifest| { &m.start },
            |m: &mut Manifest| { &mut m.start },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "backend",
            |m: &Manifest| { &m.backend },
            |m: &mut Manifest| { &mut m.backend },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Manifest>(
            "Manifest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Manifest {
    const NAME: &'static str = "Manifest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.app_name = is.read_string()?;
                },
                18 => {
                    self.start = is.read_string()?;
                },
                40 => {
                    self.backend = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.app_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.app_name);
        }
        if !self.start.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.start);
        }
        if self.backend != ::protobuf::EnumOrUnknown::new(Backend::CANVAS) {
            my_size += ::protobuf::rt::int32_size(5, self.backend.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.app_name.is_empty() {
            os.write_string(1, &self.app_name)?;
        }
        if !self.start.is_empty() {
            os.write_string(2, &self.start)?;
        }
        if self.backend != ::protobuf::EnumOrUnknown::new(Backend::CANVAS) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.backend))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Manifest {
        Manifest::new()
    }

    fn clear(&mut self) {
        self.app_name.clear();
        self.start.clear();
        self.backend = ::protobuf::EnumOrUnknown::new(Backend::CANVAS);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Manifest {
        static instance: Manifest = Manifest {
            app_name: ::std::string::String::new(),
            start: ::std::string::String::new(),
            backend: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Manifest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Manifest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Manifest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Manifest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:windowpane_apps.Backend)
pub enum Backend {
    // @@protoc_insertion_point(enum_value:windowpane_apps.Backend.CANVAS)
    CANVAS = 0,
    // @@protoc_insertion_point(enum_value:windowpane_apps.Backend.DOM)
    DOM = 1,
    // @@protoc_insertion_point(enum_value:windowpane_apps.Backend.HTML)
    HTML = 2,
    // @@protoc_insertion_point(enum_value:windowpane_apps.Backend.URL)
    URL = 3,
}

impl ::protobuf::Enum for Backend {
    const NAME: &'static str = "Backend";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Backend> {
        match value {
            0 => ::std::option::Option::Some(Backend::CANVAS),
            1 => ::std::option::Option::Some(Backend::DOM),
            2 => ::std::option::Option::Some(Backend::HTML),
            3 => ::std::option::Option::Some(Backend::URL),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Backend] = &[
        Backend::CANVAS,
        Backend::DOM,
        Backend::HTML,
        Backend::URL,
    ];
}

impl ::protobuf::EnumFull for Backend {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Backend").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Backend {
    fn default() -> Self {
        Backend::CANVAS
    }
}

impl Backend {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Backend>("Backend")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0emanifest.proto\x12\x0fwindowpane_apps\"{\n\x08Manifest\x12\x19\n\
    \x08app_name\x18\x01\x20\x01(\tR\x07appName\x12\x14\n\x05start\x18\x02\
    \x20\x01(\tR\x05start\x122\n\x07backend\x18\x05\x20\x01(\x0e2\x18.window\
    pane_apps.BackendR\x07backendJ\x04\x08\x03\x10\x04J\x04\x08\x04\x10\x05*\
    1\n\x07Backend\x12\n\n\x06CANVAS\x10\0\x12\x07\n\x03DOM\x10\x01\x12\x08\
    \n\x04HTML\x10\x02\x12\x07\n\x03URL\x10\x03J\x98\x04\n\x06\x12\x04\0\0\
    \x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\
    \x18\n\n\n\x02\x04\0\x12\x04\x04\0\t\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\
    \x08\x10\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x18\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x0b\
    \x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x16\x17\n\x0b\n\x04\x04\0\
    \x02\x01\x12\x03\x06\x04\x15\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\
    \x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x0b\x10\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x06\x13\x14\n/\n\x03\x04\0\t\x12\x03\x07\x04\x12\
    \"#\x20Application\x20settings,\x20permissions\n\n\x0b\n\x04\x04\0\t\0\
    \x12\x03\x07\r\x0e\n\x0c\n\x05\x04\0\t\0\x01\x12\x03\x07\r\x0e\n\x0c\n\
    \x05\x04\0\t\0\x02\x12\x03\x07\r\x0e\n\x0b\n\x04\x04\0\t\x01\x12\x03\x07\
    \x10\x11\n\x0c\n\x05\x04\0\t\x01\x01\x12\x03\x07\x10\x11\n\x0c\n\x05\x04\
    \0\t\x01\x02\x12\x03\x07\x10\x11\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x08\
    \x04\x18\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x08\x04\x0b\n\x0c\n\x05\
    \x04\0\x02\x02\x01\x12\x03\x08\x0c\x13\n\x0c\n\x05\x04\0\x02\x02\x03\x12\
    \x03\x08\x16\x17\n\n\n\x02\x05\0\x12\x04\x0b\0\x10\x01\n\n\n\x03\x05\0\
    \x01\x12\x03\x0b\x05\x0c\n\x0b\n\x04\x05\0\x02\0\x12\x03\x0c\x04\x0f\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03\x0c\x04\n\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03\x0c\r\x0e\n\x0b\n\x04\x05\0\x02\x01\x12\x03\r\x04\x0c\n\x0c\n\
    \x05\x05\0\x02\x01\x01\x12\x03\r\x04\x07\n\x0c\n\x05\x05\0\x02\x01\x02\
    \x12\x03\r\n\x0b\n\x0b\n\x04\x05\0\x02\x02\x12\x03\x0e\x04\r\n\x0c\n\x05\
    \x05\0\x02\x02\x01\x12\x03\x0e\x04\x08\n\x0c\n\x05\x05\0\x02\x02\x02\x12\
    \x03\x0e\x0b\x0c\n\x0b\n\x04\x05\0\x02\x03\x12\x03\x0f\x04\x0c\n\x0c\n\
    \x05\x05\0\x02\x03\x01\x12\x03\x0f\x04\x07\n\x0c\n\x05\x05\0\x02\x03\x02\
    \x12\x03\x0f\n\x0bb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Manifest::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Backend::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
